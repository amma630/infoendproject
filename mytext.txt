### **Step 1: Create a Django Project**  
If you haven't created a Django project yet, start by doing so:  
```bash
django-admin startproject voice_attendance_management
cd voice_attendance_management
```

---

### **Step 2: Create the Required Apps**  
Django apps should be modular, so we will create **5 apps**:

| App Name         | Purpose |
|------------------|---------|
| `users`         | Manages authentication & user roles |
| `attendance`    | Handles voice-based attendance tracking |
| `tasks`         | Manages task creation, prioritization & updates |
| `voice_assistant` | Processes speech recognition & NLP commands |
| `dashboard`     | Provides UI & analytics for users & admins |

Run the following commands to create all the apps:  
```bash
python manage.py startapp users
python manage.py startapp attendance
python manage.py startapp tasks
python manage.py startapp voice_assistant
python manage.py startapp dashboard
```

---

### **Step 3: Register Apps in `settings.py`**  
Open `voice_attendance_management/settings.py` and **add the apps** to `INSTALLED_APPS`:  
```python
INSTALLED_APPS = [
    'users',
    'attendance',
    'tasks',
    'voice_assistant',
    'dashboard',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
```

---

### **Step 4: Apply Migrations**  
Before proceeding, **migrate the database**:  
```bash
python manage.py makemigrations
python manage.py migrate
```

Now, all **5 apps** are created and registered! üöÄ  
Would you like to start implementing models, views, and APIs step by step?

Here's a complete **Django user authentication system** with **HTML, CSS, and Django views**. This includes:  
‚úÖ User Registration  
‚úÖ Login & Logout  
‚úÖ Profile Page  
‚úÖ Voice Sample Upload for Attendance  

---

## **1Ô∏è‚É£ Setting Up the `users` App**
Run this command inside your Django project directory:
```sh
python manage.py startapp users
```

---

## **2Ô∏è‚É£ Update `settings.py`**
Add `'users'` to `INSTALLED_APPS`:
```python
INSTALLED_APPS = [
    'users',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
```

Set the user model (optional but recommended):
```python
AUTH_USER_MODEL = 'users.CustomUser'
```

---

## **3Ô∏è‚É£ Create the `CustomUser` Model in `users/models.py`**
Replace the default Django user model with a custom one that includes a voice sample field.

```python
from django.contrib.auth.models import AbstractUser
from django.db import models

class CustomUser(AbstractUser):
    voice_sample = models.FileField(upload_to='voice_samples/', null=True, blank=True)

    def __str__(self):
        return self.username
```

Run migrations:
```sh
python manage.py makemigrations users
python manage.py migrate
```

---

## **4Ô∏è‚É£ Create User Forms (`users/forms.py`)**
Django forms for registration and login.

```python
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from .models import CustomUser

class CustomUserCreationForm(UserCreationForm):
    voice_sample = forms.FileField(required=True)

    class Meta:
        model = CustomUser
        fields = ['username', 'email', 'password1', 'password2', 'voice_sample']

class LoginForm(AuthenticationForm):
    pass
```

---

## **5Ô∏è‚É£ Create Views (`users/views.py`)**
Handle registration, login, logout, and profile.

```python
from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from .forms import CustomUserCreationForm, LoginForm
from django.contrib.auth.decorators import login_required

def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST, request.FILES)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('profile')
    else:
        form = CustomUserCreationForm()
    return render(request, 'users/register.html', {'form': form})

def user_login(request):
    if request.method == 'POST':
        form = LoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('profile')
    else:
        form = LoginForm()
    return render(request, 'users/login.html', {'form': form})

def user_logout(request):
    logout(request)
    return redirect('login')

@login_required
def profile(request):
    return render(request, 'users/profile.html')
```

---

## **6Ô∏è‚É£ Set Up URLs (`users/urls.py`)**
```python
from django.urls import path
from .views import register, user_login, user_logout, profile

urlpatterns = [
    path('register/', register, name='register'),
    path('login/', user_login, name='login'),
    path('logout/', user_logout, name='logout'),
    path('profile/', profile, name='profile'),
]
```

Add these to `urls.py` in the project folder:
```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('users/', include('users.urls')),
]
```

---

## **7Ô∏è‚É£ Create Templates (`users/templates/users/`)**
**üîπ `register.html`**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <h2>Register</h2>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Sign Up</button>
    </form>
    <p>Already have an account? <a href="{% url 'login' %}">Login</a></p>
</body>
</html>
```

**üîπ `login.html`**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <h2>Login</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
    <p>Don't have an account? <a href="{% url 'register' %}">Sign Up</a></p>
</body>
</html>
```

**üîπ `profile.html`**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <h2>Welcome, {{ user.username }}!</h2>
    <p>Email: {{ user.email }}</p>
    {% if user.voice_sample %}
        <p>Voice Sample: <a href="{{ user.voice_sample.url }}">Download</a></p>
    {% else %}
        <p>No voice sample uploaded</p>
    {% endif %}
    <a href="{% url 'logout' %}">Logout</a>
</body>
</html>
```

---

## **8Ô∏è‚É£ Add Basic CSS (`static/style.css`)**
```css
body {
    font-family: Arial, sans-serif;
    text-align: center;
}

form {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

input, button {
    display: block;
    width: 100%;
    margin-bottom: 10px;
}
```

---

## **9Ô∏è‚É£ Run the Server & Test**
```sh
python manage.py runserver
```
Go to:  
üîπ **http://127.0.0.1:8000/users/register/** (Signup)  
üîπ **http://127.0.0.1:8000/users/login/** (Login)  
üîπ **http://127.0.0.1:8000/users/profile/** (Profile)

---

## **‚úÖ Features Implemented**
‚úî User Authentication (Signup, Login, Logout)  
‚úî Voice Sample Upload  
‚úî Profile Page to View Details  
‚úî Secure Routes with `login_required`  

---

## **Next Steps** üöÄ
Now, we can integrate **voice authentication** using `SpeechRecognition` and `pyaudio`. Would you like to add **voice-based login verification** next? üé§üîä